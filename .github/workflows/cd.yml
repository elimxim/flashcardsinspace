name: Deploy on Version Change

on:
  push:
    branches:
      - main
    paths:
      - 'settings.gradle.kts'

jobs:
  launch-rocket:
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build --console=plain

      - name: Generate application.yaml from template
        run: |
          echo "Generating application.yaml with secrets"
          
          export APP_PORT="${{ secrets.APP_PORT }}"
          export APP_SSL_KEYSTORE_PATH="${{ secrets.APP_SSL_KEYSTORE_PATH }}"
          export APP_SSL_KEYSTORE_PASSWORD="${{ secrets.APP_SSL_KEYSTORE_PASSWORD }}"
          export APP_SSL_KEYSTORE_ALIAS="${{ secrets.APP_SSL_KEYSTORE_ALIAS }}"
          export APP_DATASOURCE_URL="${{ secrets.APP_DATASOURCE_URL }}"
          export APP_DATASOURCE_USERNAME="${{ secrets.APP_DATASOURCE_USERNAME }}"
          export APP_DATASOURCE_PASSWORD="${{ secrets.APP_DATASOURCE_PASSWORD }}"
          export APP_SECURITY_JWT_SECRET="${{ secrets.APP_SECURITY_JWT_SECRET }}"
          
          envsubst < props/application.yaml > application.yaml

      - name: Copy generated application.yaml to Droplet
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          source: "application.yaml"
          target: "/tmp"

      - name: Copy App Archive to Droplet
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          source: "build/distributions/*boot*.tar"
          target: "/tmp"
      
      - name: Deploy New Version
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            # --- Configuration ---
            APP_BASE_DIR="/opt/flashcardsinspace"
            CONFIG_DIR="${APP_BASE_DIR}/cfg"
            CONFIG_FILE_PATH="${CONFIG_DIR}/application.yaml"
            RELEASES_DIR="${APP_BASE_DIR}/releases"
            CURRENT_RELEASE="${APP_BASE_DIR}/current"
            PID_FILE="${APP_BASE_DIR}/app.pid"
            # --- End Configuration ---

            echo "----> Starting deployment"
            
            # 0. Create dirs
            echo "----> Going to '${APP_BASE_DIR}'"
            cd "${APP_BASE_DIR}"
            echo "----> Creating directories"
            mkdir -p "${APP_BASE_DIR}"
            mkdir -p "${CONFIG_DIR}"
            mkdir -p "${RELEASES_DIR}"

            # 1. Find the archive and extract the version name
            ARCHIVE_PATH=$(find /tmp -name '*boot*.tar')
            if [ -z "${ARCHIVE_PATH}" ]; then
              echo "Error: No '*boot*.tar' archive found in /tmp. Aborting."
              exit 1
            fi
            
            ARCHIVE_FILENAME=$(basename "${ARCHIVE_PATH}")
            # Extract semver using a regular expression.
            # This finds the last hyphen and captures everything between it and '.tar'.
            # Example: 'my-app-1.2.3-SNAPSHOT.tar' becomes '1.2.3-SNAPSHOT'.
            VERSION_NAME=$(echo "${ARCHIVE_FILENAME}" | sed -E 's/.*-([0-9]+\.[0-9].*)\.tar/\1/')
            
            # Add a check to ensure semver extraction was successful
            if [ "${VERSION_NAME}" = "${ARCHIVE_FILENAME}" ]; then
              echo "Error: Could not extract semver from '${ARCHIVE_FILENAME}'."
              echo "Filename must be in a format like 'project-name-1.2.3.tar'. Aborting."
              rm "${ARCHIVE_PATH}"
              exit 1
            fi
            
            # 2. Set up configuration
            echo "----> Setting up configuration file"
            mv /tmp/application.yaml "${CONFIG_FILE_PATH}"
            if [ ! -f "${CONFIG_FILE_PATH}" ]; then
              echo "Error: Configuration file '/tmp/application.yaml' not found on remote server. Aborting."
              rm "${ARCHIVE_PATH}"
              exit 1
            fi
                        
            # 3. Check if the release directory already exists
            NEW_RELEASE_DIR="${RELEASES_DIR}/${VERSION_NAME}"
            echo "----> Preparing new release directory: ${NEW_RELEASE_DIR}"
            if [ -d "${NEW_RELEASE_DIR}" ]; then
              echo "Error: Release directory '${NEW_RELEASE_DIR}' already exists. Aborting."
              rm "${ARCHIVE_PATH}"
              exit 1
            fi
            
            # 4. Create the new release directory and unpack the archive
            mkdir -p "${NEW_RELEASE_DIR}"
            echo "----> Unpacking ${ARCHIVE_PATH}"
            tar -xf "${ARCHIVE_PATH}" -C "${NEW_RELEASE_DIR}"
            
            UNPACKED_SUBDIR=$(tar -tf "${ARCHIVE_PATH}" | head -1 | cut -f1 -d"/")
            if [ -n "$UNPACKED_SUBDIR" ]; then
                mv "${NEW_RELEASE_DIR}/${UNPACKED_SUBDIR}"/* "${NEW_RELEASE_DIR}/"
                rmdir "${NEW_RELEASE_DIR}/${UNPACKED_SUBDIR}"
            fi

            # 5. Stop the currently running application
            echo "----> Stopping the current application"
            if [ -f "${PID_FILE}" ]; then
              echo "Found PID file, killing process $(cat ${PID_FILE})"
              kill $(cat "${PID_FILE}") || true
              rm -f "${PID_FILE}"
            else
              echo "PID file not found, skipping kill."
            fi
            sleep 2

            # 6. Atomically switch the symbolic link to the new version
            echo "----> Activating new release by updating the symbolic link"
            ln -snf "${NEW_RELEASE_DIR}" "${CURRENT_RELEASE}"

            # 7. Run the new application
            START_SCRIPT_PATH="${CURRENT_RELEASE}/bin/flash"
            echo "----> Starting new application: ${START_SCRIPT_PATH}"
            rm -f "${APP_BASE_DIR}/app.log"
            nohup "${START_SCRIPT_PATH}" --spring.config.additional-location="file:${CONFIG_DIR}/" > "${APP_BASE_DIR}/app.log" 2>&1 &
            echo $! > "${PID_FILE}"
            echo "----> New application started with PID $(cat ${PID_FILE})"

            # 8. Clean up the uploaded archive from /tmp
            echo "----> Cleaning up temporary archive"
            rm "${ARCHIVE_PATH}"

            # 9. Health Check
            echo "----> Performing health check"
            HEALTH_CHECK_URL="http://localhost:${{ secrets.APP_PORT }}/actuator/health"
            for i in {1..30}; do
              HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" $HEALTH_CHECK_URL)
              if [ "$HTTP_STATUS" -eq 200 ]; then
                echo "----> Health check successful! Application is up and running."
                break
              else
                echo "----> Health check attempt $i failed with status $HTTP_STATUS. Retrying in 5 seconds..."
                sleep 5
              fi
            done

            if [ "$HTTP_STATUS" -ne 200 ]; then
              echo "Error: Health check failed after several attempts. Deployment failed."
              exit 1
            fi

            echo "----> Deployment successful!"